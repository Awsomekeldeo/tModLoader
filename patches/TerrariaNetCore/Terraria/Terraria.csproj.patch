--- src/Terraria/Terraria/Terraria.csproj
+++ src/TerrariaNetCore/Terraria/Terraria.csproj
@@ -4,59 +_,43 @@
 	<Import Project="../../WorkspaceInfo.targets" />
 
 	<PropertyGroup>
-		<OutputType>WinExe</OutputType>
+		<OutputType>Exe</OutputType>
 		<Version>1.4.3.6</Version>
 		<Company>Re-Logic</Company>
 		<Copyright>Copyright Â© 2022 Re-Logic</Copyright>
 		<RootNamespace>Terraria</RootNamespace>
-		<OutputName>Terraria</OutputName>
+		<AssemblyName>Terraria</AssemblyName>
 	</PropertyGroup>
 
 	<PropertyGroup Condition="$(Configuration.Contains('Server'))">
-		<OutputType>Exe</OutputType>
-		<OutputName>$(OutputName)Server</OutputName>
+		<AssemblyName>$(AssemblyName)Server</AssemblyName>
 	</PropertyGroup>
 
 	<PropertyGroup Condition="$(Configuration.Contains('Debug'))">
-		<OutputName>$(OutputName)Debug</OutputName>
+		<AssemblyName>$(AssemblyName)Debug</AssemblyName>
+	</PropertyGroup>
+
+	<!-- Avoid overwriting Terraria(Server).exe (if it's not Debug it's release) -->
+	<PropertyGroup Condition="!$(Configuration.Contains('Debug'))">
+		<AssemblyName>$(AssemblyName)Release</AssemblyName>
 	</PropertyGroup>
 
 	<PropertyGroup>
-		<PdbFile>bin\$(OutputName)</PdbFile>
+		<OutputName>$(AssemblyName)</OutputName>
 		<ApplicationIcon>Icon.ico</ApplicationIcon>
 	</PropertyGroup>
 
 	<ItemGroup>
+		<ProjectReference Include="../../../FNA/FNA.Core.csproj" />
+		<ProjectReference Include="../ReLogic/ReLogic.csproj" />
 		<Reference Include="CsvHelper" />
-		<Reference Include="FNA" Condition="$(DefineConstants.Contains('FNA'))" />
 		<Reference Include="Ionic.Zip.CF" />
-		<Reference Include="MP3Sharp" Condition="$(DefineConstants.Contains('CLIENT'))" />
-		<Reference Include="Microsoft.Xna.Framework" Condition="$(DefineConstants.Contains('XNA'))" />
-		<Reference Include="Microsoft.Xna.Framework.Game" Condition="$(DefineConstants.Contains('XNA'))" />
-		<Reference Include="Microsoft.Xna.Framework.Graphics" Condition="$(DefineConstants.Contains('XNA'))" />
-		<Reference Include="Microsoft.Xna.Framework.Xact" Condition="$(DefineConstants.Contains('XNA'))" />
-		<Reference Include="NVorbis.System.ValueTuple" />
+		<Reference Include="MP3Sharp" />
 		<Reference Include="Newtonsoft.Json" />
-		<Reference Include="NVorbis" Condition="$(DefineConstants.Contains('CLIENT'))" />
+		<Reference Include="NVorbis" />
 		<Reference Include="RailSDK.Net" />
-		<ProjectReference Include="../ReLogic/ReLogic.csproj" />
-		<EmbeddedResource Include="../ReLogic/bin/$(Configuration)/$(TargetFramework)/ReLogic.dll">
-			<Link>Libraries/ReLogic/ReLogic.dll</Link>
-			<LogicalName>Terraria.Libraries.ReLogic.ReLogic.dll</LogicalName>
-		</EmbeddedResource>
-		<Reference Include="Steamworks.NET">
-			<HintPath Condition="$(DefineConstants.Contains('WINDOWS'))">Libraries/Windows/Steamworks.NET.dll</HintPath>
-			<HintPath Condition="$(DefineConstants.Contains('MONO'))">Libraries/Mono/Steamworks.NET.dll</HintPath>
-		</Reference>
 		<Reference Include="SteelSeriesEngineWrapper" />
-		<Reference Include="System" />
-		<Reference Include="System.Core" />
-		<Reference Include="System.Drawing" />
-		<Reference Include="System.Runtime.Serialization" />
-		<Reference Include="System.Windows.Forms">
-			<HintPath Condition="$(DefineConstants.Contains('Mono'))">Libraries/Mono/System.Windows.Forms.dll</HintPath>
-		</Reference>
-		<Reference Include="WindowsBase" />
+		<PackageReference Include="Steamworks.NET" Version="20.1.0" />
 	</ItemGroup>
 
 	<ItemGroup>
@@ -64,40 +_,70 @@
 		<EmbeddedResource Include="GameContent/Metadata/MaterialData/*" />
 		<EmbeddedResource Include="GameContent/WorldBuilding/*" />
 		<EmbeddedResource Include="IO/Data/*" />
-		<EmbeddedResource Include="Libraries/**" />
-		<EmbeddedResource Remove="Libraries/FNA/**" />
-		<EmbeddedResource Remove="Libraries/XNA/**" />
-		<EmbeddedResource Remove="Libraries/Native/**" />
-		<EmbeddedResource Remove="Libraries/Windows/**" Condition="!$(DefineConstants.Contains('WINDOWS'))" />
-		<EmbeddedResource Remove="Libraries/Mono/**" Condition="!$(DefineConstants.Contains('MONO'))" />
 		<EmbeddedResource Include="Localization/Content/**" />
 		<EmbeddedResource Include="Microsoft/**" />
 	</ItemGroup>
 
 	<ItemGroup>
+		<Compile Remove="Social/WeGame/AsyncTaskHelper.cs" />
+		<Compile Remove="Social/WeGame/CurrentThreadRunner.cs" />
-		<None Remove="Libraries/Native/**" />
+		<None Remove="Libraries/Mono/**" />
+		<None Remove="Libraries/Windows/**" />
+		<None Remove="Libraries/XNA/**" />
+		<Content Include="Libraries/Native/**" CopyToOutputDirectory="PreserveNewest" />
 	</ItemGroup>
 
-	<Target Name="EditBin" AfterTargets="Build">
-		<PropertyGroup>
-			<EditBinOpts>/largeaddressaware</EditBinOpts>
-			<DumpBin>/headers</DumpBin>
-		</PropertyGroup>
-
-		<PropertyGroup Condition="$(DefineConstants.Contains('DEBUG'))">
-			<EditBinOpts>$(EditBinOpts) /stack:0x800000</EditBinOpts>
-		</PropertyGroup>
-
-		<Message Text="Applying editbin $(EditBinOpts)" Importance="high" />
-		<Exec Command="..\largeaddresstool\editbin $(EditBinOpts) &quot;$(TargetPath)&quot;" />
-		<Message Text="Checking headers with dumpbin." Importance="high" />
-		<Exec Command="..\largeaddresstool\dumpbin $(DumpBin) &quot;$(TargetPath)&quot; | findstr &quot;large&quot;" />
-	</Target>
-
-	<Target Name="CopyToStreamDir" AfterTargets="EditBin" Condition="$(Configuration.Contains('Windows'))">
-		<Message Text="Copying $(OutputName) to Steam Dir..." Importance="high" />
-		<Copy SourceFiles="$(TargetPath)" DestinationFiles="$(TerrariaSteamPath)\$(OutputName).exe" />
-		<Copy SourceFiles="$(TargetDir)$(OutputName).pdb" DestinationFolder="$(TerrariaSteamPath)" />
-	</Target>
+	<PropertyGroup>
+		<_ActualOutputDirectory>$(TerrariaSteamPath)</_ActualOutputDirectory>
+	</PropertyGroup>
+
+	<!-- Manage libraries -->
+	
+	<UsingTask TaskName="OrganizeDependencies" AssemblyFile="$(DependencyOrganizerAssemblyFile)" />
+	<UsingTask TaskName="InjectAdditionalRuntimeTarget" AssemblyFile="$(DependencyOrganizerAssemblyFile)" />
+
+	<!-- This task moves all dependencies to the Libraries folder, while modifying the runtimeconfig json path to point to the new locations. -->
+	<Target Name="ConfigureDependencies" AfterTargets="GenerateBuildDependencyFile">
+		<Message Text="Adding additional dependencies..." Importance="high" />
+		
+		<!-- Make FNA be able to find SDL2 -->
+		<InjectAdditionalRuntimeTarget DepsFile="$(ProjectDepsFilePath)" TargetLibrary="FNA/1.0.0" AssetType="native" FilePath="Libraries/Native/win-x64/SDL2.dll" RuntimeIdentifier="win-x64" />
+		<InjectAdditionalRuntimeTarget DepsFile="$(ProjectDepsFilePath)" TargetLibrary="FNA/1.0.0" AssetType="native" FilePath="Libraries/Native/win-x86/SDL2.dll" RuntimeIdentifier="win-x86" />
+		<InjectAdditionalRuntimeTarget DepsFile="$(ProjectDepsFilePath)" TargetLibrary="FNA/1.0.0" AssetType="native" FilePath="Libraries/Native/linux-x64/libSDL2-2.0.so.0" RuntimeIdentifier="linux-x64" />
+		<InjectAdditionalRuntimeTarget DepsFile="$(ProjectDepsFilePath)" TargetLibrary="FNA/1.0.0" AssetType="native" FilePath="Libraries/Native/osx-x64/libSDL2-2.0.0.dylib" RuntimeIdentifier="osx-x64" />
+		
+		<Message Text="Organizing dependencies..." Importance="high" />
+
+		<OrganizeDependencies
+			OutputPath="$(OutputPath)"
+			AssemblyName="$(AssemblyName)"
+			LibrariesDir="Libraries"
+			ProjectDepsFilePath="$(ProjectDepsFilePath)"
+			ProjectRuntimeConfigFilePath="$(ProjectRuntimeConfigFilePath)"
+		/>
+	</Target>
+	
+	<!-- This task copies all the Native libraries to Libraries/Native directory in output. -->
+	<Target Name="CopyNatives" AfterTargets="ConfigureDependencies">
+		<ItemGroup>
+			<NativeFiles Include="$(MSBuildThisFileDirectory)\References\Native\**" />
+		</ItemGroup>
+		
+		<Message Text="Copying natives from '$(MSBuildThisFileDirectory)\References\Native' to '$(TargetDir)\Libraries\Native'" Importance="High" />
+	
+		<Copy SourceFiles="@(NativeFiles)" DestinationFolder="$(TargetDir)\Libraries\Native\%(RecursiveDir)" SkipUnchangedFiles="False" />
+	</Target>
+	
+	<!-- Final output cleanups -->
+	
+	<UsingTask TaskName="DeleteEmptyDirectories" AssemblyFile="$(DependencyOrganizerAssemblyFile)" />
+	
+	<Target Name="DeleteEmptyDirectories" AfterTargets="CopyNatives" >
+		<DeleteEmptyDirectories Path="$(OutputPath)" />
+	</Target>
+	
+	<!-- Output copying -->
+	
+	<!-- TODO -->
 
 </Project>

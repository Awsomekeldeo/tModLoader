--- src/TerrariaNetCore/Terraria/Audio/LegacySoundPlayer.cs
+++ src/tModLoader/Terraria/Audio/LegacySoundPlayer.cs
@@ -5,6 +_,7 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 using Terraria.ID;
 
 namespace Terraria.Audio
@@ -41,8 +_,8 @@
 		public SoundEffectInstance SoundInstancePixie;
 		public Asset<SoundEffect>[] SoundItem = new Asset<SoundEffect>[SoundID.ItemSoundCount];
 		public SoundEffectInstance[] SoundInstanceItem = new SoundEffectInstance[SoundID.ItemSoundCount];
-		public Asset<SoundEffect>[] SoundNpcHit = new Asset<SoundEffect>[58];
+		public Asset<SoundEffect>[] SoundNpcHit = new Asset<SoundEffect>[SoundID.NPCHitCount];
-		public SoundEffectInstance[] SoundInstanceNpcHit = new SoundEffectInstance[58];
+		public SoundEffectInstance[] SoundInstanceNpcHit = new SoundEffectInstance[SoundID.NPCHitCount];
 		public Asset<SoundEffect>[] SoundNpcKilled = new Asset<SoundEffect>[SoundID.NPCDeathCount];
 		public SoundEffectInstance[] SoundInstanceNpcKilled = new SoundEffectInstance[SoundID.NPCDeathCount];
 		public SoundEffectInstance SoundInstanceMoonlordCry;
@@ -96,6 +_,7 @@
 		}
 
 		private void LoadAll() {
+			/*
 			SoundMech[0] = Load("Sounds/Mech_0");
 			SoundGrab = Load("Sounds/Grab");
 			SoundPixie = Load("Sounds/Pixie");
@@ -177,6 +_,7 @@
 			for (int num3 = 0; num3 < TrackableSounds.Length; num3++) {
 				TrackableSounds[num3] = Load("Sounds/Custom" + Path.DirectorySeparatorChar + SoundID.GetTrackableLegacySoundPath(num3));
 			}
+			*/
 		}
 
 		public void CreateAllSoundInstances() {
@@ -185,6 +_,8 @@
 			}
 
 			_trackedInstances.Clear();
+
+			/*
 			SoundInstanceMech[0] = CreateInstance(SoundMech[0]);
 			SoundInstanceGrab = CreateInstance(SoundGrab);
 			SoundInstancePixie = CreateInstance(SoundGrab);
@@ -262,6 +_,7 @@
 			for (int num5 = 0; num5 < TrackableSounds.Length; num5++) {
 				TrackableSoundInstances[num5] = CreateInstance(TrackableSounds[num5]);
 			}
+			*/
 		}
 
 		private SoundEffectInstance CreateInstance(Asset<SoundEffect> asset) {
@@ -825,6 +_,7 @@
 							break;
 						default:
 							switch (type) {
+								// funni. This may be a decompilation artifact, but this case seems unreachable.
 								case 45:
 									num = 109;
 									SoundInstanceZombie[num] = SoundZombie[num].Value.CreateInstance();
@@ -1058,7 +_,80 @@
 			return null;
 		}
 
-		public SoundEffect GetTrackableSoundByStyleId(int id) => TrackableSounds[id].Value;
+		public SoundEffect GetTrackableSoundByStyleId(int soundId, int style) {
+			Asset<SoundEffect> asset = soundId switch {
+				LegacySoundIDs.Trackable => TrackableSounds[style],
+				// Uhh
+				LegacySoundIDs.Dig => SoundDig[style],
+				LegacySoundIDs.PlayerHit => SoundPlayerHit[style],
+				LegacySoundIDs.Item => SoundItem[style],
+				LegacySoundIDs.NPCHit => SoundNpcHit[style],
+				LegacySoundIDs.NPCKilled => SoundNpcKilled[style],
+				LegacySoundIDs.PlayerKilled => SoundPlayerKilled,
+				LegacySoundIDs.Grass => SoundGrass,
+				LegacySoundIDs.Grab => SoundGrab,
+				LegacySoundIDs.DoorOpen => SoundDoorOpen,
+				LegacySoundIDs.DoorClosed => SoundDoorClosed,
+				LegacySoundIDs.MenuOpen => SoundMenuOpen,
+				LegacySoundIDs.MenuClose => SoundMenuClose,
+				LegacySoundIDs.MenuTick => SoundMenuTick,
+				LegacySoundIDs.Shatter => SoundShatter,
+				LegacySoundIDs.ZombieMoan => SoundZombie[style],
+				LegacySoundIDs.Roar => SoundRoar[style],
+				LegacySoundIDs.DoubleJump => SoundDoubleJump,
+				LegacySoundIDs.Run => SoundRun,
+				LegacySoundIDs.Coins => SoundCoins,
+				LegacySoundIDs.Splash => SoundSplash[style],
+				LegacySoundIDs.FemaleHit => SoundFemaleHit[style],
+				LegacySoundIDs.Tink => SoundTink[style],
+				LegacySoundIDs.Unlock => SoundUnlock,
+				LegacySoundIDs.Drown => SoundDrown,
+				LegacySoundIDs.Chat => SoundChat,
+				LegacySoundIDs.MaxMana => SoundMaxMana,
+				LegacySoundIDs.Mummy => SoundZombie[Main.rand.Next(3, 5)],
+				LegacySoundIDs.Pixie => SoundPixie,
+				LegacySoundIDs.Mech => SoundMech[style],
+				LegacySoundIDs.Zombie => SoundZombie[style],
+				LegacySoundIDs.Duck => SoundZombie[Main.rand.Next(10, 12)],
+				LegacySoundIDs.Frog => SoundZombie[13],
+				LegacySoundIDs.Bird => SoundZombie[style],
+				LegacySoundIDs.Critter => SoundZombie[15],
+				LegacySoundIDs.Waterfall => SoundLiquid[0],
+				LegacySoundIDs.Lavafall => SoundLiquid[1],
+				LegacySoundIDs.ForceRoar => SoundRoar[style],
+				LegacySoundIDs.Meowmere => SoundItem[Main.rand.Next(57, 59)],
+				LegacySoundIDs.CoinPickup => SoundCoin[Main.rand.Next(5)],
+				LegacySoundIDs.Drip => SoundDrip[style],
+				LegacySoundIDs.Camera => SoundCamera,
+				LegacySoundIDs.MoonLord => SoundNpcKilled[10],
+				LegacySoundIDs.Thunder => SoundThunder[style],
+				LegacySoundIDs.Seagull => SoundZombie[Main.rand.Next(106, 109)],
+				LegacySoundIDs.Dolphin => SoundZombie[109],
+				LegacySoundIDs.Owl => SoundZombie[Main.rand.Next(110, 112)],
+				LegacySoundIDs.GuitarC => SoundItem[133],
+				LegacySoundIDs.GuitarD => SoundItem[134],
+				LegacySoundIDs.GuitarEm => SoundItem[135],
+				LegacySoundIDs.GuitarG => SoundItem[136],
+				LegacySoundIDs.GuitarAm => SoundItem[137],
+				LegacySoundIDs.GuitarF => SoundItem[138],
+				LegacySoundIDs.DrumHiHat => SoundItem[139],
+				LegacySoundIDs.DrumTomHigh => SoundItem[140],
+				LegacySoundIDs.DrumTomLow => SoundItem[141],
+				LegacySoundIDs.DrumTomMid => SoundItem[142],
+				LegacySoundIDs.DrumClosedHiHat => SoundItem[143],
+				LegacySoundIDs.DrumCymbal1 => SoundItem[144],
+				LegacySoundIDs.DrumCymbal2 => SoundItem[145],
+				LegacySoundIDs.DrumKick => SoundItem[146],
+				LegacySoundIDs.DrumTamaSnare => SoundItem[147],
+				LegacySoundIDs.DrumFloorTom => SoundItem[148],
+				LegacySoundIDs.Research => SoundResearch[Main.rand.Next(1, 4)],
+				LegacySoundIDs.ResearchComplete => SoundResearch[0],
+				LegacySoundIDs.QueenSlime => SoundZombie[Main.rand.Next(115, 118)],
+				_ => null
+			};
+
+			return asset.Value;
+		}
 
 		public void StopAmbientSounds() {
 			for (int i = 0; i < SoundInstanceLiquid.Length; i++) {

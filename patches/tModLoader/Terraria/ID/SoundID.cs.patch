--- src/TerrariaNetCore/Terraria/ID/SoundID.cs
+++ src/tModLoader/Terraria/ID/SoundID.cs
@@ -1,3 +_,4 @@
+using System;
 using System.Collections.Generic;
 using System.Linq;
 using System.Reflection;
@@ -5,9 +_,9 @@
 
 namespace Terraria.ID
 {
-	public class SoundID
+	public partial class SoundID
 	{
-		private struct SoundStyleDefaults
+		public struct SoundStyleDefaults
 		{
 			public readonly float PitchVariance;
 			public readonly float Volume;
@@ -21,6 +_,15 @@
 		}
 
 		private static readonly SoundStyleDefaults ItemDefaults = new SoundStyleDefaults(1f, 0.06f);
+	}
+
+	// The following is a split of the integer IDs into a separate internal class,
+	// with most of them recreated in SoundID as LegacySoundStyle values, so that it's possible to leave only one PlaySound method in the public API,
+	// and also to make it easier to modify/copy sound styles when, for example, adjusting playback volume.
+
+	internal class LegacySoundIDs
+	{
+		// Vanilla code:
 		public const int Dig = 0;
 		public const int PlayerHit = 1;
 		public const int Item = 2;
@@ -87,6 +_,82 @@
 		public const int Research = 63;
 		public const int ResearchComplete = 64;
 		public const int QueenSlime = 65;
+		// Added by TML:
+		public const int Count = 66;
+	}
+
+	public partial class SoundID
+	{
+		// Start of replaced IDs
+		public static readonly LegacySoundStyle Dig = new(0, 0);
+		public static readonly LegacySoundStyle PlayerHit = new(1, 0);
+		public static readonly LegacySoundStyle Item = new(2, 0);
+		//public static readonly LegacySoundStyle NPCHit = new(3, 0);
+		//public static readonly LegacySoundStyle NPCKilled = new(4, 0);
+		public static readonly LegacySoundStyle PlayerKilled = new(5, 0);
+		public static readonly LegacySoundStyle Grass = new(6, 0);
+		public static readonly LegacySoundStyle Grab = new(7, 0);
+		public static readonly LegacySoundStyle DoorOpen = new(8, 0);
+		public static readonly LegacySoundStyle DoorClosed = new(9, 0);
+		public static readonly LegacySoundStyle MenuOpen = new(10, 0);
+		public static readonly LegacySoundStyle MenuClose = new(11, 0);
+		public static readonly LegacySoundStyle MenuTick = new(12, 0);
+		public static readonly LegacySoundStyle Shatter = new(13, 0);
+		public static readonly LegacySoundStyle ZombieMoan = new(14, 0);
+		public static readonly LegacySoundStyle Roar = new(15, 0);
+		public static readonly LegacySoundStyle DoubleJump = new(16, 0);
+		public static readonly LegacySoundStyle Run = new(17, 0);
+		public static readonly LegacySoundStyle Coins = new(18, 0);
+		public static readonly LegacySoundStyle Splash = new(19, 0);
+		public static readonly LegacySoundStyle FemaleHit = new(20, 0);
+		public static readonly LegacySoundStyle Tink = new(21, 0);
+		public static readonly LegacySoundStyle Unlock = new(22, 0);
+		public static readonly LegacySoundStyle Drown = new(23, 0);
+		public static readonly LegacySoundStyle Chat = new(24, 0);
+		public static readonly LegacySoundStyle MaxMana = new(25, 0);
+		public static readonly LegacySoundStyle Mummy = new(26, 0);
+		public static readonly LegacySoundStyle Pixie = new(27, 0);
+		public static readonly LegacySoundStyle Mech = new(28, 0);
+		public static readonly LegacySoundStyle Zombie = new(29, 0);
+		public static readonly LegacySoundStyle Duck = new(30, 0);
+		public static readonly LegacySoundStyle Frog = new(31, 0);
+		public static readonly LegacySoundStyle Bird = new(32, 0);
+		public static readonly LegacySoundStyle Critter = new(33, 0);
+		public static readonly LegacySoundStyle Waterfall = new(34, 0);
+		public static readonly LegacySoundStyle Lavafall = new(35, 0);
+		public static readonly LegacySoundStyle ForceRoar = new(36, 0);
+		public static readonly LegacySoundStyle Meowmere = new(37, 0);
+		public static readonly LegacySoundStyle CoinPickup = new(38, 0);
+		public static readonly LegacySoundStyle Drip = new(39, 0);
+		public static readonly LegacySoundStyle Camera = new(40, 0);
+		public static readonly LegacySoundStyle MoonLord = new(41, 0);
+		public static readonly LegacySoundStyle Trackable = new(42, 0);
+		public static readonly LegacySoundStyle Thunder = new(43, 0);
+		public static readonly LegacySoundStyle Seagull = new(44, 0);
+		public static readonly LegacySoundStyle Dolphin = new(45, 0);
+		public static readonly LegacySoundStyle Owl = new(46, 0);
+		public static readonly LegacySoundStyle GuitarC = new(47, 0);
+		public static readonly LegacySoundStyle GuitarD = new(48, 0);
+		public static readonly LegacySoundStyle GuitarEm = new(49, 0);
+		public static readonly LegacySoundStyle GuitarG = new(50, 0);
+		public static readonly LegacySoundStyle GuitarAm = new(51, 0);
+		public static readonly LegacySoundStyle GuitarF = new(52, 0);
+		public static readonly LegacySoundStyle DrumHiHat = new(53, 0);
+		public static readonly LegacySoundStyle DrumTomHigh = new(54, 0);
+		public static readonly LegacySoundStyle DrumTomLow = new(55, 0);
+		public static readonly LegacySoundStyle DrumTomMid = new(56, 0);
+		public static readonly LegacySoundStyle DrumClosedHiHat = new(57, 0);
+		public static readonly LegacySoundStyle DrumCymbal1 = new(58, 0);
+		public static readonly LegacySoundStyle DrumCymbal2 = new(59, 0);
+		public static readonly LegacySoundStyle DrumKick = new(60, 0);
+		public static readonly LegacySoundStyle DrumTamaSnare = new(61, 0);
+		public static readonly LegacySoundStyle DrumFloorTom = new(62, 0);
+		public static readonly LegacySoundStyle Research = new(63, 0);
+		public static readonly LegacySoundStyle ResearchComplete = new(64, 0);
+		public static readonly LegacySoundStyle QueenSlime = new(65, 0);
+		public static readonly LegacySoundStyle Count = new(66, 0);
+		// End of replaced IDs.
+
 		public static readonly LegacySoundStyle NPCHit1 = new LegacySoundStyle(3, 1);
 		public static readonly LegacySoundStyle NPCHit2 = new LegacySoundStyle(3, 2);
 		public static readonly LegacySoundStyle NPCHit3 = new LegacySoundStyle(3, 3);
@@ -144,6 +_,7 @@
 		public static readonly LegacySoundStyle NPCHit55 = new LegacySoundStyle(3, 55);
 		public static readonly LegacySoundStyle NPCHit56 = new LegacySoundStyle(3, 56);
 		public static readonly LegacySoundStyle NPCHit57 = new LegacySoundStyle(3, 57);
+		public static int NPCHitCount = 58; // Added by tML
 		public static readonly LegacySoundStyle NPCDeath1 = new LegacySoundStyle(4, 1);
 		public static readonly LegacySoundStyle NPCDeath2 = new LegacySoundStyle(4, 2);
 		public static readonly LegacySoundStyle NPCDeath3 = new LegacySoundStyle(4, 3);
@@ -209,7 +_,7 @@
 		public static readonly LegacySoundStyle NPCDeath63 = new LegacySoundStyle(4, 63);
 		public static readonly LegacySoundStyle NPCDeath64 = new LegacySoundStyle(4, 64);
 		public static readonly LegacySoundStyle NPCDeath65 = new LegacySoundStyle(4, 65);
-		public static short NPCDeathCount = 66;
+		public static int NPCDeathCount = 66; // TML: Changed from short to int.
 		public static readonly LegacySoundStyle Item1 = new LegacySoundStyle(2, 1);
 		public static readonly LegacySoundStyle Item2 = new LegacySoundStyle(2, 2);
 		public static readonly LegacySoundStyle Item3 = new LegacySoundStyle(2, 3);
@@ -382,7 +_,7 @@
 		public static readonly LegacySoundStyle Item170 = new LegacySoundStyle(2, 170);
 		public static readonly LegacySoundStyle Item171 = new LegacySoundStyle(2, 171);
 		public static readonly LegacySoundStyle Item172 = new LegacySoundStyle(2, 172);
-		public static short ItemSoundCount = 173;
+		public static int ItemSoundCount = 173; // TML: Changed from short to int.
 		public static readonly LegacySoundStyle DD2_GoblinBomb = new LegacySoundStyle(2, 14).WithVolume(0.5f);
 		public static readonly LegacySoundStyle AchievementComplete = CreateTrackable("achievement_complete");
 		public static readonly LegacySoundStyle BlizzardInsideBuildingLoop = CreateTrackable("blizzard_inside_building_loop", SoundType.Ambient);
@@ -499,25 +_,33 @@
 		public static int TrackableLegacySoundCount => _trackableLegacySoundPathList.Count;
 
 		public static string GetTrackableLegacySoundPath(int id) => _trackableLegacySoundPathList[id];
-		private static LegacySoundStyle CreateTrackable(string name, SoundStyleDefaults defaults) => CreateTrackable(name, 1, defaults.Type).WithPitchVariance(defaults.PitchVariance).WithVolume(defaults.Volume);
+		public static LegacySoundStyle CreateTrackable(string name, SoundStyleDefaults defaults) => CreateTrackable(name, 1, defaults.Type).WithPitchVariance(defaults.PitchVariance).WithVolume(defaults.Volume);
-		private static LegacySoundStyle CreateTrackable(string name, int variations, SoundStyleDefaults defaults) => CreateTrackable(name, variations, defaults.Type).WithPitchVariance(defaults.PitchVariance).WithVolume(defaults.Volume);
+		public static LegacySoundStyle CreateTrackable(string name, int variations, SoundStyleDefaults defaults) => CreateTrackable(name, variations, defaults.Type).WithPitchVariance(defaults.PitchVariance).WithVolume(defaults.Volume);
-		private static LegacySoundStyle CreateTrackable(string name, SoundType type = SoundType.Sound) => CreateTrackable(name, 1, type);
+		public static LegacySoundStyle CreateTrackable(string name, SoundType type = SoundType.Sound) => CreateTrackable(name, 1, type);
 
-		private static LegacySoundStyle CreateTrackable(string name, int variations, SoundType type = SoundType.Sound) {
+		public static LegacySoundStyle CreateTrackable(string name, int variations, SoundType type = SoundType.Sound) {
 			if (_trackableLegacySoundPathList == null)
 				_trackableLegacySoundPathList = new List<string>();
 
+			Span<int> styles = stackalloc int[variations]; // Added due to TML's changes.
+
 			int count = _trackableLegacySoundPathList.Count;
 			if (variations == 1) {
+				styles[0] = TrackableLegacySoundCount;
 				_trackableLegacySoundPathList.Add(name);
 			}
 			else {
 				for (int i = 0; i < variations; i++) {
+					styles[i] = TrackableLegacySoundCount;
 					_trackableLegacySoundPathList.Add(name + "_" + i);
 				}
 			}
 
+			/*
 			return new LegacySoundStyle(42, count, variations, type);
+			*/
+			
+			return new LegacySoundStyle(42, styles, type);
 		}
 
 		public static void FillAccessMap() {
